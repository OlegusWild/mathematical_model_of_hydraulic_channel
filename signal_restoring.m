clear
% Параметры Фурье-преобразования
Fs = 1000; % частота дискретизации
Ts = 1/Fs; % шаг по времени
% Выбор временного отрезка
duration = [0 10]; % начальная и конечная точки отрезка

% Параметры скважины (только варьируемые)
L = 1000; ro = 2700; d = 114;

% Используем передаточную ф-цию, формируемую в W_line.m, 
[W_line, w, t, FftL] = W_line(Fs, ro, d, L, duration, 'P');

% Задаём сигнал. Все доступные см. в signal_type.m
Signal = signal_type(t, 'rectangles');

%--------------------------Фурье-преобразования---------------------------
%-------------------------------------------------------------------------
% Образ сигнала идеальный (без шума)
original_fft = fft(Signal, FftL);

% Образ выходного сигнала после прохождения линии (симуляция)
Fft_S_out = W_line .* (original_fft);

% Входной по выходному сигналу с помощью передаточной ф-ции W_line (шума нет)
% Это братная задача: восстановление входного сигнала по выходному
fft_restored = Fft_S_out ./ W_line;


% Возвращаем во временной домен **(не обязательно, проверка правильности
% использования fft (нет шума, получаем тот же входной сигнал)
restored_signal = ifft(fft_restored, FftL);


% Выходной сигнал, временной домен (регистрация на поверхности) 
S_out = ifft(Fft_S_out);
%-------------------------------------------------------------------------
% Создаём шум (в датчик давления помимо сигнала попадают и шумы)
err = rand(1,length(t));
err = err - mean(err);
err = err * real(max(S_out))*0.01 / std(err); % шум/сигнал опцион
%-------------------------------------------------------------------------

% Добавляем шум к выходному сигналу, временной домен
S_out_noise = S_out + err;

% Преобразуем обратно в частотный домен
Fft_S_out_noise = fft(S_out_noise, FftL);

%-------------------------полосовой фильтр--------------------------------
Fft_S_out_filtered = Fft_S_out_noise .* ...
    bandpass_filter(Fs, FftL, 1024, 0.3, 'no') .* exp(-1i*w.*angle(bandpass_filter(Fs, FftL, 1024, 0.3, 'no')));
    % Важно помнить, что ФЧХ полосового фильтра не нулевое!
%-------------------------------------------------------------------------

% Восстанавливаем входной сигнал по шумному выходному 
% с помощью передаточной функции
% НЕ используем полосовой фильтр!
fft_restored_signal_raw = Fft_S_out_noise ./ W_line;
restored_signal_noise_raw = ifft(fft_restored_signal_raw, FftL);
restored_signal_noise_raw = real(restored_signal_noise_raw); % Избавляемся от мнимых дребезгов

% Ещё раз восстанавливаем входной сигнал, но теперь применяя к Фурье-образу
% выходного сигнала полосовой фильтр (см. выше, ф-ция bandpass_filter.m)
fft_restored_signal_filtered = Fft_S_out_filtered ./ W_line;
restored_signal_filtered = ifft(fft_restored_signal_filtered, FftL);
restored_signal_filtered = real(restored_signal_filtered); % Избавляемся от мнимых дребезгов

%---------сглаживание !восстановленного и фильтрованногo! сигнала----------
%--------------------фильтр Савитского-Голея-------------------------------
Sav_Gol_filtered = sgolayfilt(restored_signal_filtered, 3, 251);

%-------------Дополнительный сглаживающий MA-фильтр----------------------
MA_filtered = MA_filter(Sav_Gol_filtered, 50);


%------------------------ВИЗУАЛИЗАЦИЯ РЕЗУЛЬТАТОВ-------------------------
% Частоты
F = Fs*(0:FftL/2-1)/FftL; % сдвиг

% 1) Просто смотрим, что подали на вход
figure();
plot(t, Signal);
title('Входной сигнал');
xlabel('t, s');
ylabel('A');

% 2) Восстановление входного сигнала из выходного при наличии шума
% БЕЗ использования полосового фильтра
figure();
plot(t, restored_signal_noise_raw);
title('Входной сигнал из шумного выходного, без фильтра');
xlabel('t, s');
ylabel('A');

% 3) Восстановление входного сигнала из выходного при наличии шума
% С использованием полосового фильтра
figure();
plot(t, restored_signal_filtered);
title('Входной сигнал из шумного выходного, с фильтром');
xlabel('t, s');
ylabel('A');

% 4) Обзор выходных сигналов
figure();
% Выходной сигнал, регистрируемый на поверхности в идеальном случае 
% (шума нет)
subplot(2,1,1);
plot(t, real(S_out));
title('Чистый выходной сигнал');
xlabel('t, s');
ylabel('A');

% Выходной сигнал при наличии шума 
subplot(2,1,2);
plot(t, real(S_out_noise));
title('Шумный выходной сигнал');
xlabel('t, s');
ylabel('A');